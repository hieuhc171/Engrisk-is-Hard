/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package Functions.Exam;

import Menu.FormMain;
import Menu.*;
import Utils.Image.ImageUtils;
import Utils.Sound.SoundUtils;
import Utils.TextUtils;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.*;
import javax.swing.*;
import javax.swing.Timer;
import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;

/**
 *
 * @author hieum
 */
public class PanelDoTest extends javax.swing.JPanel {

    private int testType;
    /**
     * Creates new form FormDoTest
     */
    public PanelDoTest(int testType) {
        this.testType = testType;
        initComponents();
        SetupQuestionPane();
        DisplayQuestion();
//        setBackground(new Color(209, 246, 246));
        ImageUtils.InitializeBackground(this, "menu.png", 864, 480);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnBack = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionPane = new javax.swing.JTextPane();
        btnAnswer = new JButton[4];
        for(int i = 0; i < 4; i++) {
            btnAnswer[i] = new JButton();
        }

        setPreferredSize(new java.awt.Dimension(864, 480));
        setLayout(null);

        btnBack.setText("BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });
        add(btnBack);
        btnBack.setBounds(6, 6, 72, 23);

        jScrollPane1.setPreferredSize(new java.awt.Dimension(600, 150));
        jScrollPane1.setViewportView(questionPane);

        add(jScrollPane1);
        jScrollPane1.setBounds(132, 47, 600, 150);

        btnAnswer[0].setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAnswer[0].setPreferredSize(new java.awt.Dimension(300, 80));
        add(btnAnswer[0]);
        btnAnswer[0].setBounds(100, 242, 300, 80);

        btnAnswer[1].setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAnswer[1].setPreferredSize(new java.awt.Dimension(300, 80));
        add(btnAnswer[1]);
        btnAnswer[1].setBounds(464, 242, 300, 80);

        btnAnswer[3].setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAnswer[3].setPreferredSize(new java.awt.Dimension(300, 80));
        add(btnAnswer[3]);
        btnAnswer[3].setBounds(464, 360, 300, 80);

        btnAnswer[2].setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnAnswer[2].setPreferredSize(new java.awt.Dimension(300, 80));
        add(btnAnswer[2]);
        btnAnswer[2].setBounds(100, 360, 300, 80);
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        PanelMenu.BGM.play();
        FormMain.Instance().setContentPane(PanelChooseType.Instance());
        FormMain.Instance().validate();
    }//GEN-LAST:event_btnBackActionPerformed

    public final static ArrayList<Question> questList = new ArrayList<>();
    private String correctAnswer = "";
    private int currentQuest = 0;
    private int timeLeft = 3;

    private void DisplayQuestion() {
        questionPane.setText("");
        if(currentQuest >= 10) {
            EndTest();
            return;
        }
        TextUtils.AppendToPane(questionPane, "Câu hỏi số " + (currentQuest+1) + "\n\n", Color.GREEN, 14);
        if(testType == PanelChooseType.DEFINITION_TEST) {
            String question = "";
            switch (questList.get(currentQuest).questType) {
                case Question.WHICH_WORD
                    -> question = "Đây là định nghĩa của từ nào?\n\n";
                case Question.TRANSLATE
                    -> question = "Đây là nghĩa tiếng Việt của từ nào?\n\n";
                case Question.FILL_IN_THE_BLANK
                    -> question = "Điền từ vào chỗ trống:\n\n";
            }
            TextUtils.AppendToPane(questionPane, question, Color.BLACK, 16);
            TextUtils.AppendToPane(questionPane, questList.get(currentQuest).question, Color.RED, 20);
        }
        else {
            TextUtils.AppendToPane(questionPane, "Đây là cách đọc của từ nào?\n\n", Color.BLACK, 22);
            TextUtils.AppendToPane(questionPane, "Âm thanh sẽ được phát sau " + timeLeft, Color.RED, 18);

            audio_counter = new Timer(1000, new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    String oldLine = "Âm thanh sẽ được phát sau " + timeLeft;
                    timeLeft--;
                    String newLine = "Âm thanh sẽ được phát sau " + timeLeft;
                    TextUtils.ReplaceText(questionPane, oldLine, newLine);
                    System.out.println(questionPane.getDocument().getLength());
                    System.out.println(oldLine.length());
                    if(timeLeft <= 0) {
                        SoundUtils.PlaySoundFromURL(questList.get(currentQuest).question);
                        TextUtils.ReplaceText(questionPane, newLine, "");
                        audio_counter.stop();
                    }
                }
            });
        }

        correctAnswer = questList.get(currentQuest).answers[0];
        ShuffleAnswer(questList.get(currentQuest));

        for(int i = 0; i < 4; i++) {
            btnAnswer[i].setText(questList.get(currentQuest).answers[i]);
        }
        
        if(testType == PanelChooseType.PHONETIC_TEST) {
            java.util.Timer tt = new java.util.Timer(false);
            tt.schedule(new TimerTask() {
                @Override
                public void run() {
                    audio_counter.start();
                }
            }, 1000);
        }
    }

    private static javax.swing.Timer audio_counter;

    private void EndTest() {
        if(score == 0) PanelMenu.SE.setFile(SoundUtils.LOSE);
        else PanelMenu.SE.setFile(SoundUtils.WIN);
        PanelMenu.SE.play();
        User.Instance().GainEXP(score);
        String[] options = {"Trang chủ", "Chơi lại"};
        int choice = JOptionPane.showOptionDialog(this, "BẠN ĐẠT ĐƯỢC " + score + "/100 điểm!!!", "KẾT QUẢ", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
        if(choice == 0) {
            FormMain.Instance().setContentPane(PanelMenu.Instance());
        }
        else {
            FormMain.Instance().setContentPane(PanelChooseType.Instance());
        }
        FormMain.Instance().validate();
    }

    private void ShuffleAnswer(Question quest)
    {
        Random rnd = new Random();
        for (int i = quest.answers.length - 1; i > 0; i--)
        {
            int index = rnd.nextInt(i + 1);
            String a = quest.answers[index];
            quest.answers[index] = quest.answers[i];
            quest.answers[i] = a;
        }
    }

    private int score = 0;

    private void SetupQuestionPane() {
        StyledDocument doc = questionPane.getStyledDocument();
        SimpleAttributeSet center = new SimpleAttributeSet();
        StyleConstants.setAlignment(center, StyleConstants.ALIGN_CENTER);
        doc.setParagraphAttributes(0, doc.getLength(), center, false);

        timer = new Timer(2000, new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                for(JButton button : btnAnswer) {
                    button.setBackground(Color.WHITE);
                    button.addMouseListener(ml);
                }
                currentQuest++;
                DisplayQuestion();
                timer.stop();
            }
        });

        for(int i = 0; i < 4; i++) {
            btnAnswer[i].addMouseListener(ml);
        }
    }

    MouseListener ml = new MouseListener();

    class MouseListener extends MouseAdapter {
        @Override
        public void mouseEntered(MouseEvent e) {
            JButton btn = (JButton) e.getSource();
            if(btn != null)
                btn.setFont(new java.awt.Font("Segoe UI", Font.BOLD, 24));
        }
        @Override
        public void mouseExited(MouseEvent e) {
            JButton btn = (JButton) e.getSource();
            if(btn != null)
                btn.setFont(new java.awt.Font("Segoe UI", Font.BOLD, 18));
        }
        @Override
        public void mousePressed(MouseEvent e) {
            JButton btn = (JButton) e.getSource();

            if(btn != null) {
                if(btn.getText().equals(correctAnswer)) {
                    PanelMenu.SE.setFile(SoundUtils.CORRECT);
                    PanelMenu.SE.play();
                    btn.setBackground(new Color(151, 255, 96, 255));
                    score += 10;
                }
                else {
                    PanelMenu.SE.setFile(SoundUtils.INCORRECT);
                    PanelMenu.SE.play();
                    btn.setBackground(new Color(255, 123, 123, 255));
                    for(JButton button : btnAnswer) {
                        if(button.getText().equals(correctAnswer)) {
                            button.setBackground(new Color(151, 255, 96, 255));
                            break;
                        }
                    }
                }
                for(JButton button : btnAnswer) {
                    button.removeMouseListener(ml);
                }
                java.util.Timer tt = new java.util.Timer(false);
                tt.schedule(new TimerTask() {
                    @Override
                    public void run() {
                        timer.start();
                    }
                }, 0);
            }
        }
    }

    private static javax.swing.Timer timer;

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton[] btnAnswer;
    private javax.swing.JButton btnBack;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextPane questionPane;
    // End of variables declaration//GEN-END:variables
}
